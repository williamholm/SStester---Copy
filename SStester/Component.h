#pragma once
#include "EntityType.h"


/*
requires

type
way to get EntityGroups in component

idealy calculate maximum number of this component
*/


template<ComponentID>
struct Component { using type = int; };


constexpr std::array<int, MAX_ENTITY_TYPE> getSparse()
{
	std::array<int, MAX_ENTITY_TYPE> sparse = { 0,1,0,2,0,0,3,4,0 };

	int counter = 0;

	for (int i = 1; i < MAX_ENTITY_TYPE; ++i)
	{
		//if ET has component, set sparse[ET] = ++counter
	}
	return sparse;
}

//note these are just for testing purposes, should be statically generated later on
template<>
struct Component<POSITION>
{
	using type = vec3;
	//can use function to count this in future - can change to be MAX_ENTITY_TYPE in sparse.
	static constexpr int numberOfETs = 7;
	//sparse set should be generated by constexpr func, using ET's. It should also store them in order of Inheritance.
	static constexpr std::array<int, MAX_ENTITY_TYPE> sparse = { 0,1,2,3,4,5,6,7,0 };
};

template<>
struct Component<TEST_INT>
{
	using type = std::string;
	static constexpr int numberOfETs = 4;
	static constexpr std::array<int, MAX_ENTITY_TYPE> sparse = getSparse();
};
